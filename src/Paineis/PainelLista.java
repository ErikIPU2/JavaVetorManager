/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paineis;

import Interfaces.Ipaines;
import Manipuladores.Cryp;
import java.io.File;
import Manipuladores.ListdataInterpreter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author erik
 */
public class PainelLista extends javax.swing.JInternalFrame implements Ipaines{

    /**
     * Creates new form PainelLista
     */
    
    private File path;
    private int key;
    private ListdataInterpreter intp;
    
    public PainelLista() {
        initComponents();
    }
    
    public PainelLista(File path, int key) {
        initComponents();
        this.path = path;
        this.key = key;
        this.intp = new ListdataInterpreter(path);
        
        try {
            
            this.setTitle((intp.header_isPublic()) ? this.intp.header_getFileName() + "(Publico) LISTA" : this.intp.header_getFileName() + "(" + new Cryp().unCifre(this.intp.header_getUser(), this.key) + ") LISTA");
            renderTable();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    public void renderTable() {
        try {
            String[] content =  this.intp.content_getDatas(key);
            
            viewList.setModel(new javax.swing.AbstractListModel<String>() {
                
                public int getSize() {
                    return content.length;
                }

                public String getElementAt(int i) {
                    return content[i];
                }
                
            });
            
            
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        viewList = new javax.swing.JList<>();
        b_add = new javax.swing.JButton();
        b_remove = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        s_bubble = new javax.swing.JMenuItem();
        s_selection = new javax.swing.JMenuItem();
        s_merge = new javax.swing.JMenuItem();
        s_quick = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        viewList.setBorder(javax.swing.BorderFactory.createTitledBorder("Tabela"));
        jScrollPane1.setViewportView(viewList);

        b_add.setText("Adicionar");
        b_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_addActionPerformed(evt);
            }
        });

        b_remove.setText("Remover");
        b_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_removeActionPerformed(evt);
            }
        });

        jMenu1.setText("Ordenação");

        s_bubble.setText("Bubble Sort");
        s_bubble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                s_bubbleActionPerformed(evt);
            }
        });
        jMenu1.add(s_bubble);

        s_selection.setText("Selection Sort");
        s_selection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                s_selectionActionPerformed(evt);
            }
        });
        jMenu1.add(s_selection);

        s_merge.setText("Merge Sort");
        s_merge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                s_mergeActionPerformed(evt);
            }
        });
        jMenu1.add(s_merge);

        s_quick.setText("Quick Sort");
        s_quick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                s_quickActionPerformed(evt);
            }
        });
        jMenu1.add(s_quick);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_remove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_remove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_addActionPerformed
        try {
            
            if (this.intp.content_getDatas(this.key).length == 0) {
                
                int quant = Integer.parseInt(JOptionPane.showInputDialog("Digite quantos elementos vão ser adicionados"));
                
                String[] prop = new String[quant];
                
                for (int i = 0; i < quant; i++) {
                    prop[i] = JOptionPane.showInputDialog("Digite o valor do elemento a ser adicionado");
                }
                
                this.intp.addFirst_contentData(prop, key);
                
                this.renderTable();
                
            }
            
            else {
                
                int quant = Integer.parseInt(JOptionPane.showInputDialog("Digite quantos elementos vão ser adicionados"));
                
                int index = Integer.parseInt(JOptionPane.showInputDialog("Digite em qual posição deseja adicionar o elemento\nPosição minima : 0\nPosição maxima : " + intp.content_getDatas(key).length));
                
                String[] prop = new String[quant];
                
                for (int i = 0; i < quant; i++) {
                    prop[i] = JOptionPane.showInputDialog("Digite o valor do elemento a ser adicionado");
                }
                
                this.intp.add_contentData(prop, index, key);
                
                this.renderTable();
                
            }
            
            
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Digite um numero inteiro");
        }
    }//GEN-LAST:event_b_addActionPerformed

    private void b_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_removeActionPerformed
        try {
            if (this.intp.content_getDatas(key).length == 0) {
                JOptionPane.showMessageDialog(this, "Não existem elementos para serem removidos");
            }
            else {                
                int index = Integer.parseInt(JOptionPane.showInputDialog("Digite em qual posição deseja adicionar o elemento\nPosição minima : 0\nPosição maxima : " + (intp.content_getDatas(key).length-1)));
                
                if (index > intp.content_getDatas(key).length-1 || index < 0) {
                    JOptionPane.showMessageDialog(this, "Voce esta tentanto remover elementos em uma posição invalida\nDigite uma posição valida");
                }
                
                else {
                    int quant = Integer.parseInt(JOptionPane.showInputDialog(this, "Digite a quantidade de elementos a serem removidos\nMax: " + (this.intp.content_getDatas(key).length - index)));
                
                    if (quant > this.intp.content_getDatas(key).length - index) {
                        JOptionPane.showMessageDialog(this, "Voce esta tentando remover mais elementos do que realmente existem\nDigite um numero menor");
                    }
                    else {

                        for (int i = 0; i < quant; i++) {
                          intp.remove_contentData(index, key);
                        }

                        renderTable();
                    }
                }
                
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Digite um numero inteiro");
        }
    }//GEN-LAST:event_b_removeActionPerformed

    private void s_bubbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_s_bubbleActionPerformed
        try {
            
            this.intp.sort(this.intp.BUBBLE_SORT, this.key);
            this.renderTable();
            
        } catch (Exception ex) {
            
            
            JOptionPane.showMessageDialog(this, ex.getMessage());
            
        }
    }//GEN-LAST:event_s_bubbleActionPerformed

    private void s_selectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_s_selectionActionPerformed
        
        try {
            
            this.intp.sort(this.intp.SELECTION_SORT, this.key);
            this.renderTable();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());        
        }
    }//GEN-LAST:event_s_selectionActionPerformed

    private void s_quickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_s_quickActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_s_quickActionPerformed

    private void s_mergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_s_mergeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_s_mergeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_add;
    private javax.swing.JButton b_remove;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem s_bubble;
    private javax.swing.JMenuItem s_merge;
    private javax.swing.JMenuItem s_quick;
    private javax.swing.JMenuItem s_selection;
    private javax.swing.JList<String> viewList;
    // End of variables declaration//GEN-END:variables
}
