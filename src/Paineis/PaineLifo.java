/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paineis;

import Interfaces.Ipaines;
import Manipuladores.Cryp;
import Manipuladores.ListdataInterpreter;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author erik
 */
public class PaineLifo extends javax.swing.JInternalFrame implements Ipaines {

    /**
     * Creates new form PainelFifo
     */
    private File path;
    private int key;
    private ListdataInterpreter intp;

    public PaineLifo() {
        initComponents();
    }

    public PaineLifo(File path, int key) {
        initComponents();
        this.path = path;
        this.key = key;
        this.intp = new ListdataInterpreter(path);

        try {
            this.setTitle((intp.header_isPublic()) ? this.intp.header_getFileName() + "(Publico) FILA" : this.intp.header_getFileName() + "(" + new Cryp().unCifre(this.intp.header_getUser(), this.key) + ") FILA");
            renderTable();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void renderTable() {
        try {
            String[] content = this.intp.content_getDatas(key);

            viewList.setModel(new javax.swing.AbstractListModel<String>() {

                public int getSize() {
                    return content.length;
                }

                public String getElementAt(int i) {
                    return content[i];
                }
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewList = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        b_add = new javax.swing.JButton();
        b_remove = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jLabel2.setText("jLabel2");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tabela"));

        jScrollPane1.setViewportView(viewList);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ferramentas"));
        jPanel1.setToolTipText("");
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        b_add.setText("Adicionar");
        b_add.setToolTipText("Adiciona elementos no topo da pilha");
        b_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_addActionPerformed(evt);
            }
        });
        jPanel1.add(b_add);

        b_remove.setText("Remover");
        b_remove.setToolTipText("Remove o topo da pilha");
        b_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_removeActionPerformed(evt);
            }
        });
        jPanel1.add(b_remove);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_addActionPerformed
        try {
            int many = Integer.parseInt(JOptionPane.showInputDialog(this, "Digite quantos elementos vão ser adicionados na fila"));
            String[] prop = new String[many];
            if (many == 1) {
                prop[0] = JOptionPane.showInputDialog(this, "Digite o valor do elemento a ser adicionado");
                try {
                    intp.addFirst_contentData(prop[0], key);
                }
                catch (Exception e) {
                    
                }
                this.renderTable();
            }
            else {
                for (int i = 0; i < prop.length; i++) {
                    prop[i] = JOptionPane.showInputDialog(this, "Digite o valor do elemento a ser adiocionado");
                    try {
                        intp.addFirst_contentData(prop, key);
                    }
                    catch (Exception e) {
                        
                    }
                }
                this.renderTable();
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Digite um numero inteiro");
        }
        
    }//GEN-LAST:event_b_addActionPerformed

    private void b_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_removeActionPerformed
        try {
            int many = Integer.parseInt(JOptionPane.showInputDialog(this, "Digite quantos elementos você deseja deletar\nMax: "+intp.content_getDatas(key).length));
            if (many > intp.content_getDatas(key).length) {
                JOptionPane.showMessageDialog(this, "Você deseja deleter mais elementos do que realemente existem\nDigite um numero menor");
            }
            else {
                for (int i = 0; i < many; i++) {
                    intp.removeFirst_contentData(key);
                }
                renderTable();
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Digite um numero inteiro");
        }
    }//GEN-LAST:event_b_removeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_add;
    private javax.swing.JButton b_remove;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> viewList;
    // End of variables declaration//GEN-END:variables
}
